//Store information about shuttle missions. Used by deck management program.

/datum/shuttle_log
	var/shuttle_name                                  //The shuttle for which this is the log.
	var/list/datum/shuttle_mission/missions = list()  //The actual log entries.
	var/datum/shuttle_mission/current_mission         //The current mission, planned or ongoing.
	var/home_base                                     //The landmark tag from which missions originate.
	var/list/datum/nano_module/registered = list()    //Nanomodules using logs should register to recieve updates.
	var/last_spam = 0                                 //Helps with spam control from deck software.

/datum/shuttle_log/New(datum/shuttle/given_shuttle)
	..()
	if(given_shuttle.logging_home_tag)
		shuttle_name = given_shuttle.name
		home_base = given_shuttle.logging_home_tag
		shuttle_controller.shuttle_logs[given_shuttle] = src

/datum/shuttle_log/Destroy()
	update_registred()
	registered = null
	current_mission = null
	QDEL_NULL_LIST(missions)
	. = ..()

/datum/shuttle_log/proc/register(datum/nano_module/module)
	registered += module

/datum/shuttle_log/proc/unregister(datum/nano_module/module)
	registered -= module	

/datum/shuttle_log/proc/update_registred()
	for(var/datum/nano_module/module in registered)
		GLOB.nanomanager.update_uis(module)

/datum/shuttle_log/proc/submit_report(datum/shuttle_mission/mission, datum/computer_file/report/report, mob/user)
	if(!report.submit(user))
		return 0
	if(istype(report, /datum/computer_file/report/flight_plan))
		if(mission.flight_plan)
			qdel(mission.flight_plan)
		mission.flight_plan = report
	if(istype(report, /datum/computer_file/report/recipient/shuttle))
		var/old_report = locate(report.type) in mission.other_reports
		if(old_report)
			mission.other_reports -= old_report
			qdel(old_report)
		mission.other_reports += report
	update_registred()
	return 1

/datum/shuttle_log/proc/create_mission(name)
	var/datum/shuttle_mission/mission = new()
	if(name)
		mission.name = name
	else
		mission.name = "[shuttle_name]: Mission [length(missions)+1]"
	mission.ID = sequential_id(type)
	mission.shuttle_name = shuttle_name
	missions += mission
	current_mission = mission
	update_registred()
	return mission

/datum/shuttle_log/proc/rename_mission(datum/shuttle_mission/mission, name)
	if(!mission in missions)
		return
	if(name)
		mission.name = name
		update_registred()

/datum/shuttle_log/proc/mission_from_ID(given_id)
	for(var/datum/shuttle_mission/mission in missions)
		if(given_id == mission.ID)
			return mission

/datum/shuttle_log/proc/handle_move(obj/effect/shuttle_landmark/origin, obj/effect/shuttle_landmark/destination)
	var/obj/effect/shuttle_landmark/home = shuttle_controller.get_landmark(home_base)
	if(origin == home)
		shuttle_launched()
	if(destination == home)
		shuttle_returned()

/datum/shuttle_log/proc/shuttle_launched()
	if(!current_mission || (current_mission.stage != SHUTTLE_MISSION_PLANNED))
		create_mission()
	current_mission.stage = SHUTTLE_MISSION_STARTED
	current_mission.depart_time = stationtime2text()
	update_registred()

/datum/shuttle_log/proc/shuttle_returned()
	if(!current_mission || (current_mission.stage != SHUTTLE_MISSION_STARTED))
		current_mission = null
		CRASH("Shuttle returned, but mission stage was incorrect or no mission was logged.")
	current_mission.stage = SHUTTLE_MISSION_FINISHED
	current_mission.return_time = stationtime2text()
	current_mission = null
	update_registred()

/datum/shuttle_mission
	var/shuttle_name
	var/name                                          //Name assigned to the mission; visible to players.
	var/ID                                            //Autogenerated ID; don't change this manually.
	var/stage = SHUTTLE_MISSION_PLANNED               //The stage the mission is in.
	var/depart_time                                   //The station time the shuttle left (null if hasn't left).
	var/return_time                                   //The station time the shuttle came back.
	var/datum/computer_file/report/flight_plan/flight_plan
	var/list/other_reports = list()

/datum/shuttle_mission/Destroy()
	QDEL_NULL(flight_plan)
	QDEL_NULL_LIST(other_reports)
	. = ..()